services:
  agency-os:
    build:
      context: .
      dockerfile: Dockerfile
    # La sección 'ports' se elimina. Traefik (el proxy de Coolify) se encargará.
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8055/server/health"]
      interval: 1m
      timeout: 30s
      retries: 3
      start_period: 2m
    environment:
      KEY: ${KEY}
      SECRET: ${SECRET}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      DB_CLIENT: pg
      DB_HOST: ${COOLIFY_SERVICE_POSTGRESQL_HOST}
      DB_PORT: ${COOLIFY_SERVICE_POSTGRESQL_PORT}
      DB_DATABASE: ${COOLIFY_SERVICE_POSTGRESQL_DATABASE}
      DB_USER: ${COOLIFY_SERVICE_POSTGRESQL_USER}
      DB_PASSWORD: ${COOLIFY_SERVICE_POSTGRESQL_PASSWORD}
      CACHE_ENABLED: "true"
      CACHE_STORE: redis
      CACHE_REDIS: ${COOLIFY_SERVICE_REDIS_URL}
      PUBLIC_URL: https://www.digitalgebo.com
    # Etiquetas de Traefik para gestionar el proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.agency-os-http.entryPoints=http"
      - "traefik.http.routers.agency-os-http.rule=Host(`digitalgebo.com`,`www.digitalgebo.com`)"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.agency-os-http.middlewares=redirect-to-https@docker"
      - "traefik.http.routers.agency-os-https.entryPoints=https"
      - "traefik.http.routers.agency-os-https.rule=Host(`digitalgebo.com`,`www.digitalgebo.com`)"
      - "traefik.http.routers.agency-os-https.tls=true"
      - "traefik.http.routers.agency-os-https.tls.certresolver=letsencrypt"
      - "traefik.http.services.agency-os.loadbalancer.server.port=8055"
    volumes:
      - uploads:/app/uploads
      - extensions:/app/extensions

volumes:
  uploads:
    name: ${COOLIFY_VOLUME_NAME_agencyos-uploads}
  extensions:
    name: ${COOLIFY_VOLUME_NAME_agencyos-extensions}
